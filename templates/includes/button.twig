{% from 'macros/icons.twig' import icon  %}

{# De button include is een herbruikbaar component dat een knop genereert met een titel en een optioneel icoon. De knop kan een link bevatten en kan worden aangepast met verschillende stijlen en groottes. De iconen die worden gebruikt in de knop zijn afkomstig van de heroicons-bibliotheek en kunnen worden aangepast met verschillende opties. Zo kun je kiezen voor mico, mini, outline en solid. De sizes en de eventuele order (rechts van tekst) kunnen worden aangepast in de 'iconClass' #}

{# Voorbeeld: 
	{{include('includes/button.twig', {
		data: {
			button: fields.button,
			variantStyle: fields.variant,
			variantSize: 'lg',
			icon: fields.button.icon ? fields.button.icon,
			iconType: 'solid',
			iconClass: 'order-last size-8'
		}
	}, with_context = false)}}
#}


{# Set defaults #}
{% set defaults = {
    data: {
        name: 'button',
        button: {
            title: null,
            url: null,
            target: null,
        },
        variantStyle: 'primary',
        variantSize: 'md',
        icon: null,
        iconType: 'solid',
        iconClass: 'size-6',
        buttonType: 'button',
    },
    classes: {
        root: 'items-center font-bold',
        custom: '',
        display: 'inline-flex',
        rounded: 'rounded-md',
    },
    variants: {
        style: {
            primary: 'text-white border border-transparent bg-blue-700 hover:bg-blue-800 group-hover:bg-blue-800',
            secondary: 'text-teal-900 border border-transparent bg-teal-300 hover:bg-teal-400 group-hover:bg-teal-400',
            link: 'text-gray-900 bg-transparent border border-transparent  hover:underline group-hover:underline',
        },
        size: {
            sm: 'px-2.5 py-1.5 gap-2 text-xs',
            md: 'px-4 py-2 gap-3 text-base',
            lg: 'px-8 py-4 gap-4 text-base',
        }
    }
} %}

{# Merge provided data with defaults #}
{% set props = {
    data: data is defined and data is iterable ? defaults.data | merge(data) : defaults.data,
    classes: classes is defined and classes is iterable ? defaults.classes | merge(classes) : defaults.classes,
    variants: defaults.variants,
} %}

{# Set base classes #}
{% set classes = [props.classes.root, props.classes.display, props.classes.rounded] %}

{# Add variant classes #}
{% set classes = classes|merge([props.variants.style[props.data.variantStyle], props.variants.size[props.data.variantSize]]) %}

{# Add custom class #}
{% set classes = classes|merge([props.classes.custom]) %}

{# Merge classes #}
{% set classes = classes|join(' ') %}


{# Return HTML #}
	{% if props.data.button.title or props.data.icon %}
	{% set tag = props.data.button.url ? 'a' : 'button' %}
	{% set attr = props.data.button.url ? 'href=' ~ props.data.button.url : 'type=' ~ props.data.buttonType ~ (props.data.button.target ? ' target=' ~ props.data.button.target : '') %}

		<{{tag}} {{ attr }} class="{{ props.data.name }} {{ classes }}"> {% if props.data.icon %}
			{{ icon(props.data.icon, props.data.iconType, props.data.iconClass) }}
		{% endif %}
		{{ props.data.button.title ?? null }}
	</{{tag}}>
{% endif %}
